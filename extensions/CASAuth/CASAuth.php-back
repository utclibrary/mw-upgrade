<?php
/* error reporting for testing
error_reporting(E_ALL);
ini_set('display_errors', 1);
*/
/*
 * CASification script for MediaWiki 1.13 with phpCAS 0.6.0-RC5
 *
 * Requires phpCAS: http://www.ja-sig.org/wiki/display/CASC/phpCAS
 * Install by adding this line to LocalSetting.php:
 *  require_once("$IP/extensions/CASAuth/CASAuth.php");
 *
 * Remember to edit the configuration below!
 * Also consider restricting normal account creation:
 *  http://www.mediawiki.org/wiki/Manual:Preventing_access#Restrict_account_creation
 * You can disable the IP in the header which appears after logging out:
 *  http://www.mediawiki.org/wiki/Manual:$wgShowIPinHeader
 *
 *
 * Author: Ioannis Yessios (ioannis [dot] yessios [at] yale [dot] edu)
 * Worked with the code by Christophe Naslain ( chris [dot] n [at] free [dot] fr)
 * Which was based on the original script using CAS Utils by Victor Chen (Yvchen [at] sfu [dot] ca)
 * Cleaned up and bugfixed by Stefan Sundin (recover89@gmail.com)
 */
$wgExtensionCredits["other"][] = array(
	"name"        => "CASAuth",
	"version"     => "1.1e",
	"author"      => "Ioannis Yessios",
	"url"         => "https://www.mediawiki.org/wiki/Extension:CASAuthentication",
	"description" => "Implements Central Authentication Service (CAS) Authentication"
);

//--------------------------------------------------------------------------
// Configuration Variables
//--------------------------------------------------------------------------

$CASAuth = array(
	"phpCAS"         => "$IP/extensions/CASAuth/CAS", // Path to phpCAS directory.
	"Server"         => "webauth.utc.edu",        // Address to CAS server.
	"Port"           => 443,                          // Port to CAS server. Default: 443.
	"Url"            => "/cas/login/",              // Subdir to CAS authentication.
	"Version"        => "1.0",                        // CAS version, should be either 1.0 or 2.0.
	"CreateAccounts" => true,                         // Should CASAuth create accounts on the wiki? Should be true unless all accounts already exists on the wiki!
	"PwdSecret"      => "a random string of letters", // A random string that is used when generating the MediaWiki password for this user. YOU SHOULD EDIT THIS TO A VERY RANDOM STRING! YOU SHOULD ALSO KEEP THIS A SECRET!
	"EmailDomain"    => "utc.edu",                   // The default domain for new users email address (is appended to the username).
	"RememberMe"     => true,                         // Log in users with the 'Remember me' option.
);

//--------------------------------------------------------------------------
// CASAuth
//--------------------------------------------------------------------------

// Setup hooks
global $wgHooks;
$wgHooks["UserLoadFromSession"][] = "casLogin";
$wgHooks["UserLogoutComplete"][] = "casLogout";
$wgHooks["GetPreferences"][] = "casPrefs";

// Login
function casLogin($user, &$result) {
	global $CASAuth;
	global $IP, $wgLanguageCode, $wgRequest, $wgOut;

	if (isset($_REQUEST["title"])) {

		$lg = Language::factory($wgLanguageCode);

		if ($_REQUEST["title"] == $lg->specialPage("Userlogin")) {
			// Initialize the session
			session_start();

			// Setup for a web request
			require_once("$IP/includes/WebStart.php");

			// Load phpCAS
			require_once($CASAuth["phpCAS"]."/CAS.php");
			phpCAS::client($CASAuth["Version"], $CASAuth["Server"], $CASAuth["Port"], $CASAuth["Url"], false);
			//phpCAS::client(CAS_VERSION_2_0, $CASAuth["Server"], $CASAuth["Port"], $CASAuth["Url"], false);
			phpCAS::setNoCasServerValidation();
			phpCAS::forceAuthentication(); //Will redirect to CAS server if not logged in

			//get array Variables
			$mail = phpCAS::getAttribute('mail');
			// split email @ and - capitalize and recombine
			$stripNumbersFromEmail = preg_replace('/[0-9]+/', '', $mail);
			$nameEmail = explode("@", $stripNumbersFromEmail);
			$firstLastName = explode('-',$nameEmail['0']);
			$firstName = ucfirst($firstLastName[0]);
			$lastName = ucfirst($firstLastName[1]);
			$uname = $firstName." ".$lastName;
			//$sn = strtolower(phpCAS::getAttribute('sn'));
			//$fi = phpCAS::getAttribute('givenName');
			//$uname = $fi[0].$sn;
			// full name was pulling in middle initials and names - try building my own full name
			//$firstName = phpCAS::getAttribute('fullname');
			//$firstName = phpCAS::getAttribute('givenName');
			//$lastName = phpCAS::getAttribute('sn');
			//$uname = $firstName." ".$lastName;
			$groupMembership = phpCAS::getAttribute('groupMembership');
			if ((strpos($groupMembership, 'cn=Library') !== false))
			{
				$isLibraryStaff = 'yes';
			}
			else {
				$isLibraryStaff = "no";
			}
			// Get username
			//$username = phpCAS::getUser();

			// Get MediaWiki user
			$u = User::newFromName($uname);
			// Logging class initialization
			$log = new Logging();
			$userArray = phpCAS::getAttributes();
			$implodeUser = implode(" ",$userArray);
			// set path and name of log file (optional)
			$log->lfile('/tmp/user-login.txt');

			// write message to the log file
			$log->lwrite($implodeUser);

			// close log file
			$log->lclose();


			$group = "Library"; // defaults to adding new user to 'library' group
			// Create a new account if the user does not exists
			if ($u->getID() == 0 && $CASAuth["CreateAccounts"] && $isLibraryStaff == "yes") {
				// Create the user
				$u->addToDatabase();
				$u->setRealName($fullname);
				$u->setEmail($mail);
				$u->setPassword( md5($username.$CASAuth["PwdSecret"]) ); //PwdSecret is used to salt the username, which is then used to create an md5 hash which becomes the password
				$u->setToken();
				$u->saveSettings();
				$u->addGroup($group);

				// Update user count
				$ssUpdate = new SiteStatsUpdate(0,0,0,0,1);
				$ssUpdate->doUpdate();
			}

			// Login successful
			if ($CASAuth["RememberMe"]) {
				$u->setOption("rememberpassword", 1);
			}
			$u->setCookies(null, null, $CASAuth["RememberMe"]);
			$user = $u;

			// Redirect if a returnto parameter exists
			$returnto = $wgRequest->getVal("returnto");
			if ($returnto) {
				$target = Title::newFromText($returnto);
				if ($target) {
					$wgOut->redirect($target->getFullUrl()."&action=purge"); //action=purge is used to purge the cache.
				}
			}
		}
		else if ($_REQUEST["title"] == $lg->specialPage("Userlogout")) {
			// Logout
			$user->logout();
		}
	}

	// Back to MediaWiki home after login
	return true;
}

// Logout
function casLogout() {
	global $CASAuth;
	global $wgUser, $wgRequest;

	// Logout from MediaWiki
	$wgUser->doLogout();

	// Get returnto value
	$returnto = $wgRequest->getVal("returnto");
	if ($returnto) {
		$target = Title::newFromText($returnto);
		if ($target) {
			$redirecturl = $target->getFullUrl();
		}
	}

	// Logout from CAS (will redirect user to CAS server)
	require_once($CASAuth["phpCAS"]."/CAS.php");
	phpCAS::client($CASAuth["Version"], $CASAuth["Server"], $CASAuth["Port"], $CASAuth["Url"], false);
	if (isset($redirecturl)) {
		phpCAS::logoutWithRedirectService($redirecturl);
	}
	else {
		phpCAS::logout();
	}

	return true; // We won't get here
}

// Remove reset password link and remember password checkbox from preferences page
function casPrefs($user, &$preferences) {
	unset($preferences["password"]);
	unset($preferences["rememberpassword"]);
	return true;
}
/**
 * Logging class:
 * - contains lfile, lwrite and lclose public methods
 * - lfile sets path and name of log file
 * - lwrite writes message to the log file (and implicitly opens log file)
 * - lclose closes log file
 * - first call of lwrite method will open log file implicitly
 * - message is written with the following format: [d/M/Y:H:i:s] (script name) message
 */
class Logging {
    // declare log file and file pointer as private properties
    private $log_file, $fp;
    // set log file (path and name)
    public function lfile($path) {
        $this->log_file = $path;
    }
    // write message to the log file
    public function lwrite($message) {
        // if file pointer doesn't exist, then open log file
        if (!is_resource($this->fp)) {
            $this->lopen();
        }
        // define script name
        $script_name = pathinfo($_SERVER['PHP_SELF'], PATHINFO_FILENAME);
        // define current time and suppress E_WARNING if using the system TZ settings
        // (don't forget to set the INI setting date.timezone)
        $time = @date('[d/M/Y:H:i:s]');
        // write current time, script name and message to the log file
        fwrite($this->fp, "$time ($script_name) $message" . PHP_EOL);
    }
    // close log file (it's always a good idea to close a file when you're done with it)
    public function lclose() {
        fclose($this->fp);
    }
    // open log file (private method)
    private function lopen() {
        // in case of Windows set default log file
        if (strtoupper(substr(PHP_OS, 0, 3)) === 'WIN') {
            $log_file_default = 'c:/php/logfile.txt';
        }
        // set default log file for Linux and other systems
        else {
            $log_file_default = '/tmp/logfile.txt';
        }
        // define log file from lfile method or use previously set default
        $lfile = $this->log_file ? $this->log_file : $log_file_default;
        // open log file for writing only and place file pointer at the end of the file
        // (if the file does not exist, try to create it)
        $this->fp = fopen($lfile, 'a') or exit("Can't open $lfile!");
    }
}
?>
